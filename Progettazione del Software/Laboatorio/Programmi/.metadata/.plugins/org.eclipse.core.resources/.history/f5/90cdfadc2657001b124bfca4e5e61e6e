package client;

import java.awt.event.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.JTextField;

import java.awt.*;

public class ClientListener implements ActionListener{
	
	public static final String CONNECT = "connect";
	public static final String DISCONNECT = "disconnect";
	public static final String START = "start";
	public static final String STOP = "stop";
	
	private String matricola;
	private String ipAddress;
	private int porta;
	
	private boolean connected = false;
	private boolean transmitting = false;
	
	private Downloader downloader = null;
	
	private PrintWriter printWriter;
	private Scanner scanner;
	private Socket socket;
	private Frame frame;
	private static Logger logger = Logger.getLogger("client.ClientListener");
	
	public ClientListener(Frame frame, JTextField matricola, JTextField ipAddress, JTextField porta ) {
		this.frame = frame;
		this.matricola = matricola.getText();
		this.ipAddress = ipAddress.getText();
		this.porta = Integer.parseInt(porta.getText());
	}
	
	public void setupConnection() throws UnknownHostException, IOException {
		socket = new Socket(ipAddress, porta);					//inizializza la socket con ipAddress e porta
		OutputStream outputStream = socket.getOutputStream();	//crea l'outputStram per inviare informazioni
		printWriter = new PrintWriter(outputStream);			//inizializza il printWriter con outputStream
		scanner = new Scanner(socket.getInputStream());			//inizializza lo scanner per leggere informazioni
	}

	public void actionPerformed(ActionEvent event) {
		String command = event.getActionCommand();
		
		if(command.equals(CONNECT)) {
			try {
				setupConnection();
				connected = true;
				logger.log(Level.INFO, "Connessione al server riuscita.");
			} catch(IOException ioe){
				JOptionPane.showMessageDialog(null, "Impossibile connettersi al server.");
				logger.log(Level.SEVERE, "Connessione al server non riuscita" + ioe.getMessage() + ioe.getStackTrace());
				return;
			}
			JOptionPane.showMessageDialog(null, "Connessione stabilita");
		}
		
		else if(command.equals(DISCONNECT)) {
			
		}
		
		else if(command.equals(START)) {
			try {
				downloader = new Downloader (matricola, scanner);
			} catch(IOException ioe) {
				JOptionPane.showMessageDialog(null, "Impossibile creare il file.");
				logger.log(Level.SEVERE, "Impossibile creare il file" + ioe.getMessage() + ioe.getStackTrace());
			}
			
			transmitting = true;
			printWriter.println(command);
			printWriter.flush();
			
			Thread downloaderThread = new Thread(downloader);
			downloaderThread.start();
			JOptionPane.showMessageDialog(null, "Download avviato. Premere stop per interrompere.");
			logger.log(Level.INFO, "Download avviato");
			
		}
		
		else if(command.equals(STOP)) {
			
		}		
		
		frame.setButtons(connected, transmitting);
		
	}

}
